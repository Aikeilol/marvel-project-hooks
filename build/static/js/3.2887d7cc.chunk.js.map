{"version":3,"sources":["services/MarvelService.js","hooks/http.hook.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["useMarvelService","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacter","id","getAllComics","_transformComics","getComic","char","name","description","split","join","thumbnail","path","extension","homepage","urls","wiki","comics","items","title","pageCount","language","textObjects","price","prices","ErrorMessage","src","img","style","display","width","height","objectFit","margin","alt","View","imgStyle","className","href","RandomChar","setChar","useEffect","updateChar","onCharLoaded","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","chars","setChars","newListLoading","setNewListLoading","setOffset","ended","setEnded","onRequest","initial","onCharListLoaded","newCharList","length","refArr","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","duration","defaultStyle","transition","opacity","transitionStyles","entering","entered","exiting","exited","i","Transition","in","timeout","state","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","justifyContent","disabled","Skeleton","CharInfo","charId","skeleton","MainPage","selectedChar","decoration"],"mappings":"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","file":"static/js/3.2887d7cc.chunk.js","sourcesContent":["import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const { loading, request, error, clearError } = useHttp();\r\n\r\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n  const _apiKey = 'apikey=bd93315d1945c9e1ea66d6f2a4854116';\r\n  const _offset = 210;\r\n\r\n\r\n  const getAllCharacters = async (offset = _offset) => {\r\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  }\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0])\r\n  }\r\n\r\n  const getAllComics = async (offset = 0) => {\r\n    const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformComics);\r\n  }\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0])\r\n  }\r\n\r\n  const _transformCharacter = (char) => {\r\n\r\n    return {\r\n      name: char.name,\r\n      description: char.description ? char.description.split(' ', 24).join(' ') + '...' : 'Нет данных о персонаже',\r\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      id: char.id,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    }\r\n  }\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || 'There is no description',\r\n      pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n      thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n      language: comics.textObjects.language || 'en-us',\r\n      price: comics.prices.price ? `${comics.prices.price}$` : 'not available'\r\n    }\r\n  }\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    getAllCharacters,\r\n    getCharacter,\r\n    clearError,\r\n    getAllComics,\r\n    getComic,\r\n  }\r\n\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false)\r\n  const [error, setError] = useState(null)\r\n\r\n  const request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-type': 'application/json' }) => {\r\n\r\n    setLoading(true);\r\n\r\n    try {\r\n      const response = await fetch(url, { method, body, headers })\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json()\r\n\r\n      setLoading(false);\r\n      return data;\r\n\r\n    } catch(e) {\r\n      setLoading(false);\r\n      setError(e.message);\r\n      throw e;\r\n    }\r\n\r\n  }, [])\r\n\r\n  const clearError = useCallback(() => setError(null), [])\r\n\r\n  return {loading, request, error, clearError}\r\n}","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img src={img} style={{ display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto' }} alt=\"Error\" />\r\n  )\r\n}\r\n\r\nexport default ErrorMessage;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\r\nimport './randomChar.scss';\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nconst RandomChar = () => {\r\n\r\n    const [char, setChar] = useState({})\r\n    const { loading, error, getCharacter,clearError } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n    }, [])\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char)\r\n    }\r\n\r\n\r\n    const updateChar = () => {\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n        clearError()\r\n        getCharacter(id)\r\n            .then(onCharLoaded)\r\n    }\r\n\r\n\r\n    const errorMessage = error ? <ErrorMessage /> : null;\r\n    const spinner = loading ? <Spinner /> : null;\r\n    const content = !(loading || error) ? <View char={char} /> : null;\r\n    return (\r\n        <div className=\"randomchar\">\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n            <div className=\"randomchar__static\">\r\n                <p className=\"randomchar__title\">\r\n                    Random character for today!<br />\r\n                    Do you want to get to know him better?\r\n                </p>\r\n                <p className=\"randomchar__title\">\r\n                    Or choose another one\r\n                </p>\r\n                <button onClick={updateChar} className=\"button button__main\">\r\n                    <div className=\"inner\">try it</div>\r\n                </button>\r\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\r\n            </div>\r\n        </div >\r\n    )\r\n\r\n}\r\n\r\nconst View = ({ char }) => {\r\n    const { name, description, thumbnail, homepage, wiki } = char;\r\n    const imgStyle = thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg' ? 'contain' : 'cover';\r\n    return (\r\n        <div className=\"randomchar__block\">\r\n            <img src={thumbnail} style={{ objectFit: imgStyle }} alt=\"Random character\" className=\"randomchar__img\" />\r\n            <div className=\"randomchar__info\">\r\n                <p className=\"randomchar__name\">{name}</p>\r\n                <p className=\"randomchar__descr\">\r\n                    {description}\r\n                </p>\r\n                <div className=\"randomchar__btns\">\r\n                    <a href={homepage} className=\"button button__main\">\r\n                        <div className=\"inner\">homepage</div>\r\n                    </a>\r\n                    <a href={wiki} className=\"button button__secondary\">\r\n                        <div className=\"inner\">Wiki</div>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RandomChar;","import { useState, useEffect, useRef } from 'react';\r\nimport { TransitionGroup, Transition } from 'react-transition-group';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport './charList.scss';\r\n\r\nconst CharList = (props) => {\r\n\r\n    const [chars, setChars] = useState([])\r\n    const [newListLoading, setNewListLoading] = useState(false)\r\n    const [offset, setOffset] = useState(210)\r\n    const [ended, setEnded] = useState(false)\r\n\r\n    const { loading, getAllCharacters } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true);\r\n    }, [])\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewListLoading(false) : setNewListLoading(true)\r\n        getAllCharacters(offset).then(onCharListLoaded)\r\n    }\r\n\r\n\r\n\r\n    const onCharListLoaded = (newCharList) => {\r\n        if (newCharList.length < 9) {\r\n            setEnded(true)\r\n        }\r\n\r\n        setChars(chars => [...chars, ...newCharList])\r\n        setNewListLoading(false)\r\n        setOffset(offset => offset + 9)\r\n    }\r\n\r\n    const refArr = useRef([]);\r\n\r\n    const focusOnItem = (id) => {\r\n        refArr.current.forEach(item => item.classList.remove('char__item_selected'));\r\n        refArr.current[id].classList.add('char__item_selected');\r\n        refArr.current[id].focus();\r\n    }\r\n\r\n    let duration = 300;\r\n\r\n    const defaultStyle = {\r\n        transition: `opacity ${duration}ms ease-in-out`,\r\n        opacity: 0,\r\n    }\r\n\r\n    const transitionStyles = {\r\n        entering: { opacity: 0 },\r\n        entered: { opacity: 1 },\r\n        exiting: { opacity: 0 },\r\n        exited: { opacity: 0 },\r\n    };\r\n\r\n\r\n    let item = null\r\n    \r\n    if (loading && !newListLoading) {\r\n        item = <Spinner />\r\n    } else {\r\n        item = chars.map((char, i) => {\r\n            if(duration === 1200){\r\n                duration = 300;\r\n            }\r\n            duration = duration + 100\r\n            return (\r\n                <Transition in={!loading} timeout={duration}>\r\n                    {state => (\r\n                        <div style={{\r\n                            ...defaultStyle,\r\n                            ...transitionStyles[state]\r\n                        }}>\r\n                            < li key={char.id}\r\n                                tabIndex={0}\r\n                                ref={el => refArr.current[i] = el}\r\n                                className=\"char__item\"\r\n                                onClick={() => {\r\n                                    props.onCharSelected(char.id)\r\n                                    focusOnItem(i)\r\n                                }}\r\n                                onKeyPress={(e) => {\r\n                                    if (e.key === ' ' || e.key === \"Enter\") {\r\n                                        props.onCharSelected(char.id);\r\n                                        focusOnItem(i);\r\n                                    }\r\n                                }}\r\n                            >\r\n                                <img src={char.thumbnail} style={{ objectFit: char.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg' ? 'unset' : 'cover' }} alt=\"abyss\" />\r\n                                <div className=\"char__name\">{char.name}</div>\r\n                            </li >\r\n                        </div>\r\n                    )}\r\n                </Transition>\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"char__list\">\r\n            <TransitionGroup className=\"char__grid\" style={{ display: loading && !newListLoading ? 'flex' : 'grid', justifyContent: 'center' }}>\r\n                {item}\r\n            </TransitionGroup>\r\n            {ended === false ? <button\r\n                className=\"button button__main button__long\"\r\n                disabled={newListLoading}\r\n                onClick={() => onRequest(offset)}\r\n            >\r\n                <div className=\"inner\">load more</div>\r\n            </button> : 'Персонажи закончились'}\r\n        </div >\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default CharList;","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <>\r\n            <p className=\"char__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import './charInfo.scss';\r\nimport { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport Skeleton from '../skeleton/Skeleton'\r\n\r\nconst CharInfo = (props) => {\r\n\r\n  const [char, setChar] = useState(null)\r\n\r\n\r\n  const { loading, error, getCharacter, clearError } = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    updateChar();\r\n  }, [props.charId])\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char)\r\n  }\r\n\r\n  const updateChar = () => {\r\n    clearError()\r\n    const { charId } = props;\r\n    if (!charId) {\r\n      return;\r\n    }\r\n    getCharacter(charId)\r\n      .then(onCharLoaded)\r\n  }\r\n\r\n\r\n  const errorMessage = error ? <ErrorMessage /> : null;\r\n  const spinner = loading ? <Spinner /> : null;\r\n  const content = !(loading || error || !char) ? <View char={char} /> : null;\r\n  const skeleton = char || loading || error ? null : <Skeleton />\r\n\r\n\r\n  return (\r\n    <div className=\"char__info\">\r\n      {skeleton}\r\n      {errorMessage}\r\n      {spinner}\r\n      {content}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst View = ({ char }) => {\r\n  const { name, description, thumbnail, homepage, wiki, comics } = char;\r\n  const imgStyle = thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg' ? 'contain' : 'cover';\r\n  return (\r\n    <>\r\n      <div className=\"char__basics\">\r\n        <img src={thumbnail} style={{ objectFit: imgStyle }} alt={name} />\r\n        <div>\r\n          <div className=\"char__info-name\">{name}</div>\r\n          <div className=\"char__btns\">\r\n            <a href={homepage} className=\"button button__main\">\r\n              <div className=\"inner\">homepage</div>\r\n            </a>\r\n            <a href={wiki} className=\"button button__secondary\">\r\n              <div className=\"inner\">Wiki</div>\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"char__descr\">\r\n        {description}\r\n      </div>\r\n      <div className=\"char__comics\">Comics:</div>\r\n      <ul className=\"char__comics-list\">\r\n        {comics.length === 0 ? 'Комиксы не найдены' : comics.map((item, i) => {\r\n          if (i < 10) {\r\n            return (\r\n              <li key={i} className=\"char__comics-item\">\r\n                {item.name}\r\n              </li>\r\n            )\r\n          }\r\n          return null;\r\n        })}\r\n      </ul>\r\n    </>\r\n  )\r\n}\r\n\r\nCharInfo.propTypes = {\r\n  charId: PropTypes.number,\r\n}\r\n\r\nexport default CharInfo;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState, useRef, useEffect } from 'react';\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n  const [selectedChar, setChar] = useState(null)\r\n  // const vision = useRef(null)\r\n\r\n  const onCharSelected = (id) => {\r\n    setChar(id)\r\n  }\r\n\r\n  // useEffect(() => {\r\n  //   console.log(vision.current.getBoundingClientRect().top)\r\n  // })\r\n  \r\n\r\n  return (\r\n    <>\r\n      <RandomChar />\r\n      <div className=\"char__content\">\r\n        <CharList onCharSelected={onCharSelected} />\r\n        <CharInfo charId={selectedChar} />\r\n      </div>\r\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MainPage"],"sourceRoot":""}